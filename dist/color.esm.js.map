{"version":3,"sources":["../src/color.js"],"names":[],"mappings":"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","file":"color.esm.js","sourcesContent":["import colorString from 'color-string';\nimport convert from 'color-convert';\nimport clamp from 'math-clamp-x';\nimport slice from 'array-slice-x';\nimport has from 'has-own-property-x';\nimport isNil from 'is-nil-x';\nimport includes from 'array-includes-x';\nimport isLength from 'is-length-x';\nimport isArray from 'is-array-x';\nimport create from 'object-create-x';\nimport bind from 'simple-bind-x';\nimport forEach from 'array-for-each-x';\nimport reduce from 'array-reduce-x';\nimport map from 'array-map-x';\nimport objectKeys from 'object-keys-x';\nimport toNumber from 'to-number-x';\nimport toBoolean from 'to-boolean-x';\nimport trim from 'trim-x';\nimport defineProperties, {defineProperty} from 'object-define-properties-x';\nimport indexOf from 'index-of-x';\nimport stable from 'stable';\nimport renameFunction from 'rename-function-x';\nimport toLength from 'to-length-x';\nimport assertIsFunction from 'assert-is-function-x';\nimport freeze from 'object-freeze-x';\nimport castArray from 'cast-array-x';\nimport methodize from 'simple-methodize-x';\n\nconst TO_FIXED_MAX = 20;\nconst TO_FIXED_NORMAL = 6;\nconst TO_FIXED_MIN = 1;\nconst EMPTY_STRING = '';\nconst split = methodize(EMPTY_STRING.split);\nconst EMPTY_ARRAY = [];\nconst push = methodize(EMPTY_ARRAY.push);\nconst concat = methodize(EMPTY_ARRAY.concat);\nconst splice = methodize(EMPTY_ARRAY.splice);\nconst join = methodize(EMPTY_ARRAY.join);\nconst toFixed = methodize(TO_FIXED_MAX.toFixed);\nconst {stringify} = JSON;\n\n/**\n * Test if a value is a counting number, 1 -> MAX_SAFE_INTEGER.\n *\n * @param {*} value - The value to be tested.\n * @returns {boolean} True if value is a counting number.\n */\nconst isCountingNumber = function isCountingNumber(value) {\n  return isLength(value) && value > 0;\n};\n\nconst ALPHA = 'alpha';\nconst RGB = 'rgb';\nconst HSL = 'hsl';\nconst HSV = 'hsv';\nconst HWB = 'hwb';\nconst HCG = 'hcg';\nconst XYZ = 'xyz';\nconst LAB = 'lab';\nconst CMYK = 'cmyk';\nconst AA = 'AA';\nconst AAA = 'AAA';\n/** @type {ReadonlyArray<string>} */\nconst rgbKeys = freeze(split(RGB, EMPTY_STRING));\n/** @type {ReadonlyArray<string>} */\nconst skippedModels = freeze([\n  /* to be honest, I don't really feel like keyword belongs in color convert, but eh. */\n  'keyword',\n\n  /* gray conflicts with some method names, and has its own method defined. */\n  'gray',\n\n  /* shouldn't really be in color-convert either... */\n  'hex',\n]);\n\n/** @type {Readonly<string>} */\nexport const hashedModelKeys = freeze(\n  reduce(\n    objectKeys(convert),\n    function iteratee(hashed, model) {\n      const prop = join(stable(slice(convert[model].labels)), EMPTY_STRING);\n\n      hashed[prop] = model;\n\n      return hashed;\n    },\n    create(null),\n  ),\n);\n\n/**\n * The minimum values for WCAG rating.\n *\n * @type {Readonly}\n * @property {number} aa - AA minimum value.\n * @property {number} aaa - AAA minimum value.\n * @property {number} aaaLarge - AAA Large minimum value.\n * @property {number} aaLarge - AA Large minimum value.\n */\nconst minimums = freeze({\n  aa: 4.5,\n  aaa: 7,\n  aaaLarge: 4.5,\n  aaLarge: 3,\n});\n\n/**\n * Create a bound function that clamps the value to between 0 and max inclusive.\n *\n * @param {number} max - The maximum value.\n * @returns {function({value: number}): number} - The bound clamp function.\n */\nconst maxfn = function maxfn(max) {\n  return function boundMaxfn(value) {\n    return clamp(value, 0, max);\n  };\n};\n\n/**\n * Partially zeros an array to a specified length.\n *\n * @param {Array} array - The array to be partially zeroed.\n * @param {number} [length=0] - The length to zero to.\n * @returns {Array<*>} - The partially zeroed array.\n */\nconst zeroArray = function zeroArray(array, length = 0) {\n  for (let index = 0; index < length; index += 1) {\n    if (typeof array[index] !== 'number') {\n      array[index] = 0;\n    }\n  }\n\n  return array;\n};\n\n/**\n * Test if a value is a possible model.\n *\n * @param {*} value - The value to test.\n * @returns {boolean} - Indicates if value is a possible model.\n */\nconst isPossibleModel = function isPossibleModel(value) {\n  return typeof value === 'string' && toBoolean(trim(value));\n};\n\n/**\n * Convert value to appropriate number for rounding places.\n *\n * @param {*} value - The value to convert.\n * @param {number} [defaultTo=1] - The value to use if value is not a number.\n * @returns {number} - The number of places.\n */\nconst getPlaces = function getPlaces(value, defaultTo = TO_FIXED_MIN) {\n  return isNil(value) ? defaultTo : clamp(toLength(value), 0, TO_FIXED_MAX);\n};\n\n/**\n * Convert a color object to an array.\n *\n * @param {Color} colorObject - The color object.\n * @returns {Array<number>} - The array from the color object.\n */\nconst getColorArray = function getColorArray(colorObject) {\n  const {color, valpha} = colorObject;\n\n  return valpha === 1 ? color : concat(color, valpha);\n};\n\nconst assertHas = function assertHas(object, key) {\n  if (has(object, key) === false) {\n    /* eslint-disable-next-line prefer-rest-params */\n    const msg = arguments.length > 2 ? arguments[2] : `Object does not have key \"${key}\"`;\n\n    throw new Error(msg);\n  }\n\n  return object[key];\n};\n\n/**\n * Get the model.\n *\n * @param {*} value - The value provided as the model.\n * @returns {null|string} - The model.\n * @throws {Error} - If model is invalid.\n */\nconst getModel = function getModel(value) {\n  if (isPossibleModel(value)) {\n    if (includes(skippedModels, value)) {\n      return null;\n    }\n\n    assertHas(convert, value, `Unknown model: ${value}`);\n  }\n\n  return value;\n};\n\n/**\n * @type {Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>}\n * */\nconst instanceLockDescription = freeze({\n  configurable: false,\n  enumerable: true,\n  writable: false,\n});\n\n/**\n *\n * @type {Readonly<{color: Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>, model: Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>, valpha: Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>}>}\n */\nconst colorDescription = freeze({\n  color: instanceLockDescription,\n  model: instanceLockDescription,\n  valpha: instanceLockDescription,\n});\n\nconst limiters = create(null);\n\nfunction roundTo(num, places = TO_FIXED_MAX) {\n  return toNumber(toFixed(num, places));\n}\n\nfunction roundToPlaces(places = TO_FIXED_MAX) {\n  return function boundRoundTo(num) {\n    return roundTo(num, places);\n  };\n}\n\n/**\n * The Color class.\n *\n * @class Color\n * @param {*} obj - The color definition.\n * @param {string} [modelOption] - The mode.\n * @property {Array<number>} color - The color represented in the model array.\n * @property {string} model - The color model.\n * @property {number} valpha - The alpha value of the color.\n */\nconst Color = function Color(obj, modelOption) {\n  const model = getModel(modelOption);\n\n  if (isNil(obj)) {\n    this.model = RGB;\n    this.color = [0, 0, 0];\n    this.valpha = 1;\n  } else if (obj instanceof Color) {\n    this.model = obj.model;\n    this.color = slice(obj.color);\n    this.valpha = obj.valpha;\n  } else if (typeof obj === 'string') {\n    const result = colorString.get(obj);\n\n    if (result === null) {\n      throw new Error(`Unable to parse color from string: ${obj}`);\n    }\n\n    this.model = result.model;\n    const {channels} = convert[this.model];\n    this.color = slice(result.value, 0, channels);\n    this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n  } else if (isCountingNumber(obj.length)) {\n    this.model = model || RGB;\n    const {channels} = convert[this.model];\n    const newArr = slice(obj, 0, channels);\n    this.color = zeroArray(newArr, channels);\n    this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n  } else if (typeof obj === 'number') {\n    /* this is always RGB - can be converted later on. */\n    this.model = RGB;\n    /* eslint-disable-next-line no-bitwise */\n    const number = obj & 0xffffff;\n    /* eslint-disable-next-line no-bitwise */\n    this.color = [(number >> 16) & 0xff, (number >> 8) & 0xff, number & 0xff];\n    this.valpha = 1;\n  } else {\n    this.valpha = 1;\n\n    const keys = objectKeys(obj);\n\n    if (has(obj, ALPHA)) {\n      splice(keys, indexOf(keys, ALPHA), 1);\n      this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n    }\n\n    const hashedKeys = join(stable(keys), EMPTY_STRING);\n    this.model = assertHas(hashedModelKeys, hashedKeys, `Unable to parse color from object: ${stringify(obj)}`);\n    const color = map(split(convert[this.model].labels, EMPTY_STRING), function iteratee(label) {\n      return obj[label];\n    });\n\n    this.color = zeroArray(color);\n  }\n\n  /* perform limitations (clamping, etc.) */\n  if (limiters[this.model]) {\n    const {channels} = convert[this.model];\n    const limiter = limiters[this.model];\n\n    for (let index = 0; index < channels; index += 1) {\n      const limit = limiter[index];\n\n      if (limit) {\n        this.color[index] = limit(this.color[index]);\n      }\n    }\n  }\n\n  this.valpha = clamp(this.valpha, 0, 1);\n\n  freeze(this.color);\n  defineProperties(this, colorDescription);\n};\n\nconst assertInstanceOf = function assertInstanceOf(value, method) {\n  if (toBoolean(value instanceof Color) === false) {\n    throw new Error(`Argument to \"${method}\" was not a Color instance.`);\n  }\n};\n\nconst assertThisInstanceOf = function assertThisInstanceOf(value) {\n  if (toBoolean(value instanceof Color) === false) {\n    throw new Error('\"this\" is not a Color instance.');\n  }\n};\n\ndefineProperties(Color.prototype, {\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {string} - The string representation.\n   */\n  toString: {\n    configurable: true,\n    value: function $toString(places) {\n      assertThisInstanceOf(this);\n\n      return this.string(places);\n    },\n  },\n\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {string} - The string representation.\n   */\n  string: {\n    configurable: true,\n    value: function string(places) {\n      assertThisInstanceOf(this);\n      const colorObject = (has(colorString.to, this.model) ? this : this.rgb()).round(getPlaces(places));\n      const args = getColorArray(colorObject);\n\n      return colorString.to[colorObject.model](args);\n    },\n  },\n\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {string} - The string representation.\n   */\n  percentString: {\n    configurable: true,\n    value: function percentString(places) {\n      assertThisInstanceOf(this);\n      const colorObject = this.rgb().round(getPlaces(places));\n      const args = getColorArray(colorObject);\n\n      return colorString.to.rgb.percent(args);\n    },\n  },\n\n  /**\n   * @returns {Array<number>} - An array representation of the model.\n   */\n  array: {\n    configurable: true,\n    value: function array() {\n      assertThisInstanceOf(this);\n\n      return getColorArray(this);\n    },\n  },\n\n  /**\n   * @returns {object} - The plain object representation of the model.\n   */\n  object: {\n    configurable: true,\n    value: function object() {\n      assertThisInstanceOf(this);\n      const {labels} = convert[this.model];\n      const iteratee = bind(function iteratee() {\n        /* eslint-disable-next-line prefer-rest-params */\n        const obj = arguments[0];\n        /* eslint-disable-next-line babel/no-invalid-this,prefer-rest-params */\n        obj[arguments[1]] = this.color[arguments[2]];\n\n        return obj;\n      }, this);\n\n      const result = reduce(split(labels, EMPTY_STRING), iteratee, {});\n\n      if (this.valpha !== 1) {\n        result.alpha = this.valpha;\n      }\n\n      return result;\n    },\n  },\n\n  /**\n   * @returns {Array<number>} - An rgb array representation.\n   */\n  unitArray: {\n    configurable: true,\n    value: function unitArray() {\n      assertThisInstanceOf(this);\n      const rgb = map(this.rgb().color, function iteratee(value) {\n        return value / 255;\n      });\n\n      if (this.valpha !== 1) {\n        push(rgb, this.valpha);\n      }\n\n      return rgb;\n    },\n  },\n\n  /**\n   * @returns {object} - The rgb plain object representation.\n   */\n  unitObject: {\n    configurable: true,\n    value: function unitObject() {\n      assertThisInstanceOf(this);\n      const rgb = reduce(\n        rgbKeys,\n        function iteratee(object, key) {\n          object[key] /= 255;\n\n          return object;\n        },\n        this.rgb().object(),\n      );\n\n      if (this.valpha !== 1) {\n        rgb.alpha = this.valpha;\n      }\n\n      return rgb;\n    },\n  },\n\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {Color} - A new Color object that has been rounded as specified.\n   */\n  round: {\n    configurable: true,\n    value: function round(places) {\n      assertThisInstanceOf(this);\n      const rounded = map(this.color, roundToPlaces(getPlaces(places, 0)));\n\n      push(rounded, this.valpha);\n\n      return new Color(rounded, this.model);\n    },\n  },\n\n  /**\n   * @param {number} [val] - The value to modify by.\n   * @returns {number|Color} - A new Color object if val is specified, or the current alpha.\n   */\n  alpha: {\n    configurable: true,\n    value: function alpha(val) {\n      assertThisInstanceOf(this);\n\n      if (arguments.length) {\n        return new Color(concat(this.color, clamp(val, 0, 1)), this.model);\n      }\n\n      return this.valpha;\n    },\n  },\n\n  /**\n   * @param {*} [val] - A new color definition.\n   * @returns {string|Color} - A new Color object if val is specified, or the current keyword.\n   */\n  keyword: {\n    configurable: true,\n    value: function keyword(val) {\n      assertThisInstanceOf(this);\n\n      if (arguments.length) {\n        return new Color(val);\n      }\n\n      return convert[this.model].keyword(this.color);\n    },\n  },\n\n  /**\n   * @param {*} [val] - A new color definition.\n   * @returns {string|Color} - A new Color object if val is specified, or the current hex.\n   */\n  hex: {\n    configurable: true,\n    value: function hex(val) {\n      assertThisInstanceOf(this);\n\n      if (arguments.length) {\n        return new Color(val);\n      }\n\n      return colorString.to.hex(this.rgb().round().color);\n    },\n  },\n\n  /**\n   * @returns {number} - The current RGB value.\n   */\n  rgbNumber: {\n    configurable: true,\n    value: function rgbNumber() {\n      assertThisInstanceOf(this);\n      const rgb = this.rgb().color;\n\n      /* eslint-disable-next-line no-bitwise */\n      return ((rgb[0] & 0xff) << 16) | ((rgb[1] & 0xff) << 8) | (rgb[2] & 0xff);\n    },\n  },\n\n  /**\n   * @param {number} [places=6] - The number of places to round to.\n   * @returns {number} - The current luminosity value.\n   */\n  luminosity: {\n    configurable: true,\n    value: function luminosity(places) {\n      assertThisInstanceOf(this);\n      /** @see {http://www.w3.org/TR/WCAG20/#relativeluminancedef} */\n      const rgb = this.rgb().color;\n      const lum = map(rgb, function iteratee(channel) {\n        const chan = channel / 255;\n\n        return chan <= 0.03928 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n      });\n\n      return roundTo(0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2], getPlaces(places, TO_FIXED_NORMAL));\n    },\n  },\n\n  /**\n   * @param {number} [places=6] - The number of places to round to.\n   * @param {Color} color2 - The color object to contrast this color with.\n   * @returns {number} - The contrast value.\n   */\n  contrast: {\n    configurable: true,\n    value: function contrast(color2, places) {\n      assertThisInstanceOf(this);\n      assertInstanceOf(color2, 'contrast');\n      /** @see {http://www.w3.org/TR/WCAG20/#contrast-ratiodef} */\n      const lum1 = this.luminosity(TO_FIXED_MAX);\n      const lum2 = color2.luminosity(TO_FIXED_MAX);\n      const value = lum1 > lum2 ? (lum1 + 0.05) / (lum2 + 0.05) : (lum2 + 0.05) / (lum1 + 0.05);\n\n      return roundTo(value, getPlaces(places, TO_FIXED_NORMAL));\n    },\n  },\n\n  /**\n   * @param {Color} color2 - The color object to contrast this color with.\n   * @returns {string} - The WCAG contrast level.\n   */\n  level: {\n    configurable: true,\n    value: function level(color2) {\n      assertThisInstanceOf(this);\n      assertInstanceOf(color2, 'level');\n      const contrastRatio = this.contrast(color2);\n\n      if (contrastRatio >= minimums.aaa) {\n        return AAA;\n      }\n\n      return contrastRatio >= minimums.aa ? AA : EMPTY_STRING;\n    },\n  },\n\n  /**\n   * @returns {boolean} - True if color is considered dark.\n   */\n  isDark: {\n    configurable: true,\n    value: function isDark() {\n      assertThisInstanceOf(this);\n      const rgb = this.rgb().color;\n      /**\n       * YIQ equation.\n       *\n       * @see {http://24ways.org/2010/calculating-color-contrast}\n       */\n      const yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\n      return yiq < 128;\n    },\n  },\n\n  /**\n   * @returns {boolean} - True if color is considered light.\n   */\n  isLight: {\n    configurable: true,\n    value: function isLight() {\n      assertThisInstanceOf(this);\n\n      return this.isDark() === false;\n    },\n  },\n\n  /**\n   * @returns {Color} - The new negated color.\n   */\n  negate: {\n    configurable: true,\n    value: function negate() {\n      assertThisInstanceOf(this);\n\n      const rgb = reduce(\n        rgbKeys,\n        function iteratee(object, key) {\n          object[key] = 255 - object[key];\n\n          return object;\n        },\n        this.rgb().object(),\n      );\n\n      if (this.valpha !== 1) {\n        rgb.alpha = this.valpha;\n      }\n\n      return new Color(rgb, this.model);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to lighten by.\n   * @returns {Color} - The new lightened color.\n   */\n  lighten: {\n    configurable: true,\n    value: function lighten(ratio) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hsl().color);\n      const obj = {\n        h: color[0],\n        l: color[2] + color[2] * ratio,\n        s: color[1],\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to darken by.\n   * @returns {Color} - The new darkened color.\n   */\n  darken: {\n    configurable: true,\n    value: function darken(ratio) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hsl().color);\n      const obj = {\n        h: color[0],\n        l: color[2] - color[2] * ratio,\n        s: color[1],\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to saturate by.\n   * @returns {Color} - The new saturated color.\n   */\n  saturate: {\n    configurable: true,\n    value: function saturate(ratio) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hsl().color);\n      const obj = {\n        h: color[0],\n        l: color[2],\n        s: color[1] + color[1] * ratio,\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to desaturate by.\n   * @returns {Color} - The new desaturated color.\n   */\n  desaturate: {\n    configurable: true,\n    value: function desaturate(ratio) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hsl().color);\n      const obj = {\n        h: color[0],\n        l: color[2],\n        s: color[1] - color[1] * ratio,\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to whiten by.\n   * @returns {Color} - The new whitened color.\n   */\n  whiten: {\n    configurable: true,\n    value: function whiten(ratio) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hwb().color);\n      const obj = {\n        b: color[2],\n        h: color[0],\n        w: color[1] + color[1] * ratio,\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to blacken by.\n   * @returns {Color} - The new blackened color.\n   */\n  blacken: {\n    configurable: true,\n    value: function blacken(ratio) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hwb().color);\n      const obj = {\n        b: color[2] + color[2] * ratio,\n        h: color[0],\n        w: color[1],\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @returns {Color} - The new greyscale color.\n   */\n  grayscale: {\n    configurable: true,\n    value: function greyscale() {\n      assertThisInstanceOf(this);\n      /** @see {http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale} */\n      const rgb = this.rgb().color;\n      const val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\n      return Color.rgb(val, val, val);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to fade by.\n   * @returns {Color} - The new faded color.\n   */\n  fade: {\n    configurable: true,\n    value: function fade(ratio) {\n      assertThisInstanceOf(this);\n\n      return this.alpha(this.valpha - this.valpha * ratio);\n    },\n  },\n\n  /**\n   * @param {number} ratio - The ratio to modify opacity by.\n   * @returns {Color} - The new opacity modified color.\n   */\n  opaquer: {\n    configurable: true,\n    value: function opaquer(ratio) {\n      assertThisInstanceOf(this);\n\n      return this.alpha(this.valpha + this.valpha * ratio);\n    },\n  },\n\n  /**\n   * @param {number} degrees - The number of degrees to rotate by.\n   * @returns {Color} - The new rotated color.\n   */\n  rotate: {\n    configurable: true,\n    value: function rotate(degrees) {\n      assertThisInstanceOf(this);\n      const color = slice(this.hsl().color);\n      const hue = color[0];\n      const hueAngle = (hue + degrees) % 360;\n      color[0] = hueAngle < 0 ? 360 + hueAngle : hueAngle;\n\n      const obj = {\n        h: color[0],\n        l: color[2],\n        s: color[1],\n      };\n\n      if (this.valpha !== 1) {\n        obj.alpha = this.valpha;\n      }\n\n      return new Color(obj, this.model);\n    },\n  },\n\n  /**\n   * @param {Color} mixinColor - The color to mix in.\n   * @param {number} [weight=0.5] - The mixing weight.\n   * @returns {Color} - The new mixed color.\n   * @throws {Error} If mixinColor is not a Color object.\n   */\n  mix: {\n    configurable: true,\n    value: function mix(mixinColor, weight) {\n      assertThisInstanceOf(this);\n      /**\n       * Ported from sass implementation in C.\n       *\n       * @see {https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209}\n       */\n      assertInstanceOf(mixinColor, 'mix');\n      const color1 = mixinColor.rgb();\n      const color2 = this.rgb();\n      const p = arguments.length >= 2 ? weight : 0.5;\n\n      const w = 2 * p - 1;\n      const a = color1.alpha() - color2.alpha();\n\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      const w2 = 1 - w1;\n\n      return Color.rgb(\n        w1 * color1.red() + w2 * color2.red(),\n        w1 * color1.green() + w2 * color2.green(),\n        w1 * color1.blue() + w2 * color2.blue(),\n        color1.alpha() * p + color2.alpha() * (1 - p),\n      );\n    },\n  },\n});\n\nrenameFunction(Color.prototype.toString, 'toString', true);\n\nconst maxfn100 = maxfn(100);\nconst maxfn255 = maxfn(255);\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * @function getset\n * @param {string|Array<string>} model - The model(s).\n * @param {number} channel - The channel number.\n * @param {Function} [modifier] - The modifier function.\n * @returns {Function} - The bound getset function.\n */\n// eslint-enable jsdoc/check-param-names\nconst getset = function getset(model, channel) {\n  const modelArray = castArray(model);\n  /* eslint-disable-next-line prefer-rest-params */\n  const modifier = arguments[2];\n\n  forEach(modelArray, function iteratee(m) {\n    if (isArray(limiters[m]) === false) {\n      limiters[m] = [];\n    }\n\n    limiters[m][channel] = modifier;\n  });\n\n  const [modelValue] = modelArray;\n\n  return function boundGetset(value) {\n    /* eslint-disable-next-line babel/no-invalid-this */\n    assertThisInstanceOf(this);\n\n    if (arguments.length) {\n      const val = modifier ? modifier(value) : value;\n      /* eslint-disable-next-line babel/no-invalid-this */\n      const colorInstance = this[modelValue]();\n      const color = slice(colorInstance.color);\n      color[channel] = val;\n      const object = reduce(\n        split(modelValue, EMPTY_STRING),\n        function iteratee(obj, key, index) {\n          obj[key] = color[index];\n\n          return obj;\n        },\n        {},\n      );\n\n      /* eslint-disable-next-line babel/no-invalid-this */\n      if (this.valpha !== 1) {\n        /* eslint-disable-next-line babel/no-invalid-this */\n        object.alpha = this.valpha;\n      }\n\n      return new Color(object, modelValue);\n    }\n\n    /* eslint-disable-next-line babel/no-invalid-this */\n    const colorChannel = this[modelValue]().color[channel];\n\n    return modifier ? modifier(colorChannel) : colorChannel;\n  };\n};\n\ndefineProperties(Color.prototype, {\n  a: {\n    configurable: true,\n    value: getset(LAB, 1),\n  },\n  b: {\n    configurable: true,\n    value: getset(LAB, 2),\n  },\n  black: {\n    configurable: true,\n    value: getset(CMYK, 3, maxfn100),\n  },\n\n  blue: {\n    configurable: true,\n    value: getset(RGB, 2, maxfn255),\n  },\n\n  chroma: {\n    configurable: true,\n    value: getset(HCG, 1, maxfn100),\n  },\n  cyan: {\n    configurable: true,\n    value: getset(CMYK, 0, maxfn100),\n  },\n\n  gray: {\n    configurable: true,\n    value: getset(HCG, 2, maxfn100),\n  },\n  green: {\n    configurable: true,\n    value: getset(RGB, 1, maxfn255),\n  },\n\n  hue: {\n    configurable: true,\n    value: getset([HSL, HSV, HWB, HCG], 0, function modifier(val) {\n      return ((val % 360) + 360) % 360;\n    }),\n  },\n  l: {\n    configurable: true,\n    value: getset(LAB, 0, maxfn100),\n  },\n\n  lightness: {\n    configurable: true,\n    value: getset(HSL, 2, maxfn100),\n  },\n  magenta: {\n    configurable: true,\n    value: getset(CMYK, 1, maxfn100),\n  },\n\n  /* rgb */\n  red: {\n    configurable: true,\n    value: getset(RGB, 0, maxfn255),\n  },\n  saturationl: {\n    configurable: true,\n    value: getset(HSL, 1, maxfn100),\n  },\n  saturationv: {\n    configurable: true,\n    value: getset(HSV, 1, maxfn100),\n  },\n  value: {\n    configurable: true,\n    value: getset(HSV, 2, maxfn100),\n  },\n\n  wblack: {\n    configurable: true,\n    value: getset(HWB, 2, maxfn100),\n  },\n  white: {\n    configurable: true,\n    value: getset(HWB, 1, maxfn100),\n  },\n  x: {\n    configurable: true,\n    value: getset(XYZ, 0, maxfn100),\n  },\n\n  y: {\n    configurable: true,\n    value: getset(XYZ, 1, maxfn100),\n  },\n  yellow: {\n    configurable: true,\n    value: getset(CMYK, 2, maxfn100),\n  },\n  z: {\n    configurable: true,\n    value: getset(XYZ, 2, maxfn100),\n  },\n});\n\n/* model conversion methods and static constructors */\nforEach(objectKeys(convert), function iteratee(model) {\n  if (includes(skippedModels, model)) {\n    return;\n  }\n\n  const {channels} = convert[model];\n\n  /* conversion methods */\n  defineProperty(Color.prototype, model, {\n    configurable: true,\n    value: function conversionMethod() {\n      assertThisInstanceOf(this);\n\n      if (this.model === model) {\n        return new Color(this);\n      }\n\n      /* eslint-disable-next-line prefer-rest-params */\n      const args = slice(arguments);\n\n      if (args.length) {\n        return new Color(args, model);\n      }\n\n      const newAlpha = typeof args[channels] === 'number' ? channels : this.valpha;\n\n      return new Color(concat(castArray(convert[this.model][model].raw(this.color)), newAlpha), model);\n    },\n  });\n\n  renameFunction(Color.prototype[model], `conversionMethod${model.toUpperCase()}`);\n\n  /* 'static' construction methods */\n  defineProperty(Color, model, {\n    configurable: true,\n    enumerable: true,\n    value: function constructionMethod() {\n      const Ctr = assertIsFunction(this, 'Bad Color constructor');\n      /* eslint-disable-next-line prefer-rest-params */\n      const args = slice(arguments);\n      const color = args[0];\n      const col = typeof color === 'number' ? zeroArray(args, channels) : color;\n\n      return new Ctr(col, model);\n    },\n  });\n\n  renameFunction(Color[model], `constructionMethod${model.toUpperCase()}`);\n});\n\nexport default Color;\n"]}