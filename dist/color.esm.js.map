{"version":3,"sources":["../src/color.js"],"names":[],"mappings":"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","file":"color.esm.js","sourcesContent":["import colorString from 'color-string';\nimport convert from 'color-convert';\nimport clamp from 'lodash/clamp';\nimport slice from 'lodash/slice';\nimport round from 'lodash/round';\nimport castArray from 'lodash/castArray';\nimport has from 'lodash/has';\nimport isNil from 'lodash/isNil';\nimport toInteger from 'lodash/toInteger';\nimport includes from 'lodash/includes';\nimport isSafeInteger from 'lodash/isSafeInteger';\n\n/**\n * Test if a value is a counting number, 1 -> MAX_SAFE_INTEGER.\n *\n * @param {*} value - The value to be tested.\n * @returns {boolean} True if value is a counting number.\n */\nconst isCountingNumber = function isCountingNumber(value) {\n  return isSafeInteger(value) && value > 0;\n};\n\nconst EMPTY_STRING = '';\nconst ALPHA = 'alpha';\nconst RGB = 'rgb';\nconst HSL = 'hsl';\nconst HSV = 'hsv';\nconst HWB = 'hwb';\nconst HCG = 'hcg';\nconst XYZ = 'xyz';\nconst LAB = 'lab';\nconst CMYK = 'cmyk';\nconst AA = 'AA';\nconst AAA = 'AAA';\n/** @type {ReadonlyArray<string>} */\nconst rgbKeys = Object.freeze(RGB.split(EMPTY_STRING));\n/** @type {ReadonlyArray<string>} */\nconst skippedModels = Object.freeze([\n  /* to be honest, I don't really feel like keyword belongs in color convert, but eh. */\n  'keyword',\n\n  /* gray conflicts with some method names, and has its own method defined. */\n  'gray',\n\n  /* shouldn't really be in color-convert either... */\n  'hex',\n]);\n\n/** @type {Readonly<string>} */\nexport const hashedModelKeys = Object.freeze(\n  Object.keys(convert).reduce((hashed, model) => {\n    const prop = slice(convert[model].labels)\n      .sort()\n      .join(EMPTY_STRING);\n\n    hashed[prop] = model;\n\n    return hashed;\n  }, Object.create(null)),\n);\n\n/**\n * The minimum values for WCAG rating.\n *\n * @type {Readonly}\n * @property {number} aa - AA minimum value.\n * @property {number} aaa - AAA minimum value.\n * @property {number} aaaLarge - AAA Large minimum value.\n * @property {number} aaLarge - AA Large minimum value.\n */\nconst minimums = Object.freeze({\n  aa: 4.5,\n  aaa: 7,\n  aaaLarge: 4.5,\n  aaLarge: 3,\n});\n\n/**\n * Create a bound function that clamps the value to between 0 and max inclusive.\n *\n * @param {number} max - The maximum value.\n * @returns {function({value: number}): number} - The bound clamp function.\n */\nconst maxfn = function maxfn(max) {\n  return function boundMaxfn(value) {\n    // noinspection JSCheckFunctionSignatures\n    return clamp(value, 0, max);\n  };\n};\n\n/**\n * Partially zeros an array to a specified length.\n *\n * @param {Array} array - The array to be partially zeroed.\n * @param {number} [length=0] - The length to zero to.\n * @returns {Array<*>} - The partially zeroed array.\n */\nconst zeroArray = function zeroArray(array, length = 0) {\n  for (let index = 0; index < length; index += 1) {\n    if (typeof array[index] !== 'number') {\n      array[index] = 0;\n    }\n  }\n\n  return array;\n};\n\n/**\n * Test if a value is a possible model.\n *\n * @param {*} value - The value to test.\n * @returns {boolean} - Indicates if value is a possible model.\n */\nconst isModel = function isModel(value) {\n  return typeof value === 'string' && Boolean(value.trim());\n};\n\n/**\n * Convert value to appropriate number for rounding places.\n *\n * @param {*} value - The value to convert.\n * @param {number} [defaultTo=1] - The value to use if value is not a number.\n * @returns {number} - The number of places.\n */\nconst getPlaces = function getPlaces(value, defaultTo = 1) {\n  return typeof value === 'number' ? toInteger(value) || 0 : defaultTo;\n};\n\n/**\n * Convert a color object to an array.\n *\n * @param {Color} colorObject - The color object.\n * @returns {Array<number>} - The array from the color object.\n */\nconst getColorArray = function getColorArray(colorObject) {\n  const {color, valpha} = colorObject;\n\n  // noinspection JSIncompatibleTypesComparison\n  return valpha === 1 ? color : [...color, valpha];\n};\n\n/**\n * Get the model.\n *\n * @param {*} value - The value provided as the model.\n * @returns {null|string} - The model.\n * @throws {Error} - If model is invalid.\n */\nconst getModel = function getModel(value) {\n  if (isModel(value)) {\n    if (includes(skippedModels, value)) {\n      return null;\n    }\n\n    if (!has(convert, value)) {\n      throw new Error(`Unknown model: ${value}`);\n    }\n  }\n\n  return value;\n};\n\n/**\n * @type {Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>}\n * */\nconst instanceLockDescription = Object.freeze({\n  configurable: false,\n  enumerable: true,\n  writable: false,\n});\n\n/**\n *\n * @type {Readonly<{color: Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>, model: Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>, valpha: Readonly<{enumerable: boolean, configurable: boolean, writable: boolean}>}>}\n */\nconst colorDescription = Object.freeze({\n  color: instanceLockDescription,\n  model: instanceLockDescription,\n  valpha: instanceLockDescription,\n});\n\nconst limiters = Object.create(null);\n\n/**\n * The Color class.\n *\n * @class Color\n * @type {object}\n * @property {Array<number>} color - The color represented in the model array.\n * @property {string} model - The color model.\n * @property {number} valpha - The alpha value of the color.\n */\nexport default class Color {\n  /**\n   * @param {*} obj - The color definition.\n   * @param {string} [modelOption] - The model.\n   */\n  constructor(obj, modelOption) {\n    const model = getModel(modelOption);\n\n    if (isNil(obj)) {\n      this.model = RGB;\n      this.color = [0, 0, 0];\n      this.valpha = 1;\n    } else if (obj instanceof Color) {\n      this.model = obj.model;\n      this.color = [...obj.color];\n      this.valpha = obj.valpha;\n    } else if (typeof obj === 'string') {\n      const result = colorString.get(obj);\n\n      if (result === null) {\n        throw new Error(`Unable to parse color from string: ${obj}`);\n      }\n\n      this.model = result.model;\n      const {channels} = convert[this.model];\n      this.color = result.value.slice(0, channels);\n      this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n    } else if (isCountingNumber(obj.length)) {\n      this.model = model || RGB;\n      const {channels} = convert[this.model];\n      const newArr = slice(obj, 0, channels);\n      this.color = zeroArray(newArr, channels);\n      this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n    } else if (typeof obj === 'number') {\n      /* this is always RGB - can be converted later on. */\n      this.model = RGB;\n      /* eslint-disable-next-line no-bitwise */\n      const number = obj & 0xffffff;\n      /* eslint-disable-next-line no-bitwise */\n      this.color = [(number >> 16) & 0xff, (number >> 8) & 0xff, number & 0xff];\n      this.valpha = 1;\n    } else {\n      this.valpha = 1;\n\n      const keys = Object.keys(obj);\n\n      if (has(obj, ALPHA)) {\n        keys.splice(keys.indexOf(ALPHA), 1);\n        this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n      }\n\n      const hashedKeys = keys.sort().join(EMPTY_STRING);\n\n      if (!has(hashedModelKeys, hashedKeys)) {\n        throw new Error(`Unable to parse color from object: ${JSON.stringify(obj)}`);\n      }\n\n      this.model = hashedModelKeys[hashedKeys];\n\n      const color = convert[this.model].labels.split(EMPTY_STRING).map((label) => obj[label]);\n\n      this.color = zeroArray(color);\n    }\n\n    /* perform limitations (clamping, etc.) */\n    if (limiters[this.model]) {\n      const {channels} = convert[this.model];\n      const limiter = limiters[this.model];\n\n      for (let index = 0; index < channels; index += 1) {\n        const limit = limiter[index];\n\n        if (limit) {\n          this.color[index] = limit(this.color[index]);\n        }\n      }\n    }\n\n    this.valpha = clamp(this.valpha, 0, 1);\n\n    Object.freeze(this.color);\n    Object.defineProperties(this, colorDescription);\n  }\n\n  /**\n   * @returns {string} - The string representation.\n   */\n  toString() {\n    return this.string();\n  }\n\n  // toJSON() {\n  //   return this[this.model]();\n  // }\n\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {string} - The string representation.\n   */\n  string(places) {\n    const colorObject = (has(colorString.to, this.model) ? this : this.rgb()).round(getPlaces(places));\n    const args = getColorArray(colorObject);\n\n    return colorString.to[colorObject.model](args);\n  }\n\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {string} - The string representation.\n   */\n  percentString(places) {\n    const colorObject = this.rgb().round(getPlaces(places));\n    const args = getColorArray(colorObject);\n\n    return colorString.to.rgb.percent(args);\n  }\n\n  /**\n   * @returns {Array<number>} - An array representation of the model.\n   */\n  array() {\n    return getColorArray(this);\n  }\n\n  /**\n   * @returns {object} - The plain object representation of the model.\n   */\n  object() {\n    const {labels} = convert[this.model];\n    const result = labels.split(EMPTY_STRING).reduce((obj, key, index) => {\n      obj[key] = this.color[index];\n\n      return obj;\n    }, {});\n\n    if (this.valpha !== 1) {\n      result.alpha = this.valpha;\n    }\n\n    return result;\n  }\n\n  /**\n   * @returns {Array<number>} - An rgb array representation.\n   */\n  unitArray() {\n    const rgb = this.rgb().color.map((value) => value / 255);\n\n    if (this.valpha !== 1) {\n      rgb.push(this.valpha);\n    }\n\n    return rgb;\n  }\n\n  /**\n   * @returns {object} - The rgb plain object representation.\n   */\n  unitObject() {\n    const rgb = rgbKeys.reduce((object, key) => {\n      object[key] /= 255;\n\n      return object;\n    }, this.rgb().object());\n\n    if (this.valpha !== 1) {\n      rgb.alpha = this.valpha;\n    }\n\n    return rgb;\n  }\n\n  /**\n   * @param {number} [places] - The number of places to round to.\n   * @returns {Color} - A new Color object that has been rounded as specified.\n   */\n  round(places) {\n    const placesMax = Math.max(getPlaces(places, 0), 0);\n\n    // noinspection JSCheckFunctionSignatures\n    return new Color(\n      [\n        ...this.color.map((value) => {\n          return round(value, placesMax);\n        }),\n        this.valpha,\n      ],\n      this.model,\n    );\n  }\n\n  /**\n   * @param {number} [val] - The value to modify by.\n   * @returns {number|Color} - A new Color object if val is specified, or the current alpha.\n   */\n  alpha(val) {\n    if (arguments.length) {\n      return new Color([...this.color, clamp(val, 0, 1)], this.model);\n    }\n\n    return this.valpha;\n  }\n\n  /**\n   * @param {*} [val] - A new color definition.\n   * @returns {string|Color} - A new Color object if val is specified, or the current keyword.\n   */\n  keyword(val) {\n    if (arguments.length) {\n      return new Color(val);\n    }\n\n    return convert[this.model].keyword(this.color);\n  }\n\n  /**\n   * @param {*} [val] - A new color definition.\n   * @returns {string|Color} - A new Color object if val is specified, or the current hex.\n   */\n  hex(val) {\n    if (arguments.length) {\n      return new Color(val);\n    }\n\n    return colorString.to.hex(this.rgb().round().color);\n  }\n\n  /**\n   * @returns {number} - The current RGB value.\n   */\n  rgbNumber() {\n    const rgb = this.rgb().color;\n\n    /* eslint-disable-next-line no-bitwise */\n    return ((rgb[0] & 0xff) << 16) | ((rgb[1] & 0xff) << 8) | (rgb[2] & 0xff);\n  }\n\n  /**\n   * @returns {number} - The current luminosity value.\n   */\n  luminosity() {\n    /** @see {http://www.w3.org/TR/WCAG20/#relativeluminancedef} */\n    const rgb = this.rgb().color;\n    const lum = rgb.map((channel) => {\n      const chan = channel / 255;\n\n      return chan <= 0.03928 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n    });\n\n    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n  }\n\n  /**\n   * @param {Color} color2 - The color object to contrast this color with.\n   * @returns {number} - The contrast value.\n   */\n  contrast(color2) {\n    if (!(color2 instanceof Color)) {\n      throw new Error(`Argument to \"contrast\" was not a Color instance, but rather an instance of ${typeof color2}`);\n    }\n\n    /** @see {http://www.w3.org/TR/WCAG20/#contrast-ratiodef} */\n    const lum1 = this.luminosity();\n    const lum2 = color2.luminosity();\n\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  }\n\n  /**\n   * @param {Color} color2 - The color object to contrast this color with.\n   * @returns {string} - The WCAG contrast level.\n   */\n  level(color2) {\n    if (!(color2 instanceof Color)) {\n      throw new Error(`Argument to \"level\" was not a Color instance, but rather an instance of ${typeof color2}`);\n    }\n\n    const contrastRatio = this.contrast(color2);\n\n    if (contrastRatio >= minimums.aaa) {\n      return AAA;\n    }\n\n    return contrastRatio >= minimums.aa ? AA : EMPTY_STRING;\n  }\n\n  /**\n   * @returns {boolean} - True if color is considered dark.\n   */\n  isDark() {\n    const rgb = this.rgb().color;\n    /**\n     * YIQ equation.\n     *\n     * @see {http://24ways.org/2010/calculating-color-contrast}\n     */\n    const yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\n    return yiq < 128;\n  }\n\n  /**\n   * @returns {boolean} - True if color is considered light.\n   */\n  isLight() {\n    return !this.isDark();\n  }\n\n  /**\n   * @returns {Color} - The new negated color.\n   */\n  negate() {\n    const rgb = rgbKeys.reduce((object, key) => {\n      object[key] = 255 - object[key];\n\n      return object;\n    }, this.rgb().object());\n\n    if (this.valpha !== 1) {\n      rgb.alpha = this.valpha;\n    }\n\n    return new Color(rgb, this.model);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to lighten by.\n   * @returns {Color} - The new lightened color.\n   */\n  lighten(ratio) {\n    const color = [...this.hsl().color];\n    const obj = {\n      h: color[0],\n      l: color[2] + color[2] * ratio,\n      s: color[1],\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to darken by.\n   * @returns {Color} - The new darkened color.\n   */\n  darken(ratio) {\n    const color = [...this.hsl().color];\n    const obj = {\n      h: color[0],\n      l: color[2] - color[2] * ratio,\n      s: color[1],\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to saturate by.\n   * @returns {Color} - The new saturated color.\n   */\n  saturate(ratio) {\n    const color = [...this.hsl().color];\n    const obj = {\n      h: color[0],\n      l: color[2],\n      s: color[1] + color[1] * ratio,\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to desaturate by.\n   * @returns {Color} - The new desaturated color.\n   */\n  desaturate(ratio) {\n    const color = [...this.hsl().color];\n    const obj = {\n      h: color[0],\n      l: color[2],\n      s: color[1] - color[1] * ratio,\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to whiten by.\n   * @returns {Color} - The new whitened color.\n   */\n  whiten(ratio) {\n    const color = [...this.hwb().color];\n    const obj = {\n      b: color[2],\n      h: color[0],\n      w: color[1] + color[1] * ratio,\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to blacken by.\n   * @returns {Color} - The new blackened color.\n   */\n  blacken(ratio) {\n    const color = [...this.hwb().color];\n    const obj = {\n      b: color[2] + color[2] * ratio,\n      h: color[0],\n      w: color[1],\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @returns {Color} - The new greyscale color.\n   */\n  grayscale() {\n    /** @see {http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale} */\n    const rgb = this.rgb().color;\n    const val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\n    return Color.rgb(val, val, val);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to fade by.\n   * @returns {Color} - The new faded color.\n   */\n  fade(ratio) {\n    return this.alpha(this.valpha - this.valpha * ratio);\n  }\n\n  /**\n   * @param {number} ratio - The ratio to modify opacity by.\n   * @returns {Color} - The new opacity modified color.\n   */\n  opaquer(ratio) {\n    return this.alpha(this.valpha + this.valpha * ratio);\n  }\n\n  /**\n   * @param {number} degrees - The number of degrees to rotate by.\n   * @returns {Color} - The new rotated color.\n   */\n  rotate(degrees) {\n    const color = [...this.hsl().color];\n    const [hue] = color;\n    const hueAngle = (hue + degrees) % 360;\n    color[0] = hueAngle < 0 ? 360 + hueAngle : hueAngle;\n\n    const obj = {\n      h: color[0],\n      l: color[2],\n      s: color[1],\n    };\n\n    if (this.valpha !== 1) {\n      obj.alpha = this.valpha;\n    }\n\n    return new Color(obj, this.model);\n  }\n\n  /**\n   * @param {Color} mixinColor - The color to mix in.\n   * @param {number} [weight=0.5] - The mixing weight.\n   * @returns {Color} - The new mixed color.\n   * @throws {Error} If mixinColor is not a Color object.\n   */\n  mix(mixinColor, weight) {\n    /**\n     * Ported from sass implementation in C.\n     *\n     * @see {https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209}\n     */\n    if (!(mixinColor instanceof Color)) {\n      throw new Error(`Argument to \"mix\" was not a Color instance, but rather an instance of ${typeof mixinColor}`);\n    }\n\n    const color1 = mixinColor.rgb();\n    const color2 = this.rgb();\n    const p = arguments.length >= 2 ? weight : 0.5;\n\n    const w = 2 * p - 1;\n    const a = color1.alpha() - color2.alpha();\n\n    const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n    const w2 = 1 - w1;\n\n    return Color.rgb(\n      w1 * color1.red() + w2 * color2.red(),\n      w1 * color1.green() + w2 * color2.green(),\n      w1 * color1.blue() + w2 * color2.blue(),\n      color1.alpha() * p + color2.alpha() * (1 - p),\n    );\n  }\n}\n\nconst maxfn100 = maxfn(100);\nconst maxfn255 = maxfn(255);\n\n/**\n * @param {string|Array<string>} model - The model(s).\n * @param {number} channel - The channel number.\n * @param {Function} [modifier] - The modifier function.\n * @returns {Function} - The bound getset function.\n */\nconst getset = function getset(model, channel, modifier) {\n  const modelArray = castArray(model);\n\n  modelArray.forEach((m) => {\n    if (!Array.isArray(limiters[m])) {\n      limiters[m] = [];\n    }\n\n    limiters[m][channel] = modifier;\n  });\n\n  const [modelValue] = modelArray;\n\n  return function boundGetset(value) {\n    if (arguments.length) {\n      const val = modifier ? modifier(value) : value;\n      /* eslint-disable-next-line babel/no-invalid-this */\n      const colorInstance = this[modelValue]();\n      const color = [...colorInstance.color];\n      color[channel] = val;\n      const object = modelValue.split(EMPTY_STRING).reduce((obj, key, index) => {\n        obj[key] = color[index];\n\n        return obj;\n      }, {});\n\n      /* eslint-disable-next-line babel/no-invalid-this */\n      if (this.valpha !== 1) {\n        /* eslint-disable-next-line babel/no-invalid-this */\n        object.alpha = this.valpha;\n      }\n\n      return new Color(object, modelValue);\n    }\n\n    /* eslint-disable-next-line babel/no-invalid-this */\n    const colorChannel = this[modelValue]().color[channel];\n\n    return modifier ? modifier(colorChannel) : colorChannel;\n  };\n};\n\nObject.defineProperties(Color.prototype, {\n  a: {\n    value: getset(LAB, 1),\n  },\n  b: {\n    value: getset(LAB, 2),\n  },\n  black: {\n    value: getset(CMYK, 3, maxfn100),\n  },\n\n  blue: {\n    value: getset(RGB, 2, maxfn255),\n  },\n\n  chroma: {\n    value: getset(HCG, 1, maxfn100),\n  },\n  cyan: {\n    value: getset(CMYK, 0, maxfn100),\n  },\n\n  gray: {\n    value: getset(HCG, 2, maxfn100),\n  },\n  green: {\n    value: getset(RGB, 1, maxfn255),\n  },\n\n  hue: {\n    value: getset([HSL, HSV, HWB, HCG], 0, (val) => ((val % 360) + 360) % 360),\n  },\n  l: {\n    value: getset(LAB, 0, maxfn100),\n  },\n\n  lightness: {\n    value: getset(HSL, 2, maxfn100),\n  },\n  magenta: {\n    value: getset(CMYK, 1, maxfn100),\n  },\n\n  /* rgb */\n  red: {\n    value: getset(RGB, 0, maxfn255),\n  },\n  saturationl: {\n    value: getset(HSL, 1, maxfn100),\n  },\n  saturationv: {\n    value: getset(HSV, 1, maxfn100),\n  },\n  value: {\n    value: getset(HSV, 2, maxfn100),\n  },\n\n  wblack: {\n    value: getset(HWB, 2, maxfn100),\n  },\n  white: {\n    value: getset(HWB, 1, maxfn100),\n  },\n  x: {\n    value: getset(XYZ, 0, maxfn100),\n  },\n\n  y: {\n    value: getset(XYZ, 1, maxfn100),\n  },\n  yellow: {\n    value: getset(CMYK, 2, maxfn100),\n  },\n  z: {\n    value: getset(XYZ, 2, maxfn100),\n  },\n});\n\n/* model conversion methods and static constructors */\nObject.keys(convert).forEach((model) => {\n  if (includes(skippedModels, model)) {\n    return;\n  }\n\n  const {channels} = convert[model];\n\n  /* conversion methods */\n  Object.defineProperty(Color.prototype, model, {\n    value: function conversionMethod(...args) {\n      if (this.model === model) {\n        return new Color(this);\n      }\n\n      if (args.length) {\n        return new Color(args, model);\n      }\n\n      const newAlpha = typeof args[channels] === 'number' ? channels : this.valpha;\n\n      return new Color([...castArray(convert[this.model][model].raw(this.color)), newAlpha], model);\n    },\n  });\n\n  /* 'static' construction methods */\n  Object.defineProperty(Color, model, {\n    enumerable: true,\n    value: function constructionMethod(...args) {\n      const [color] = args;\n      const col = typeof color === 'number' ? zeroArray(args, channels) : color;\n\n      return new Color(col, model);\n    },\n  });\n});\n"]}